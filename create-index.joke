#!/usr/bin/env joker

(ns script
    (:require [joker.filepath :as fp]
              [joker.string :as s]
              [joker.set :refer [union]]
              [joker.os :as os]
              [joker.hiccup :as h]
              [joker.math :as m]
              [joker.core :as j]))

(defn assert=
  [actual expected]
  (assert
    (= actual expected)
    (str "Actual: " actual "\n\nExpected: " expected)))

(defn capitalize-words [string]
  (s/join " "
          (for [word (s/split string " ")]
            (s/capitalize word))))

(defn to-title [filepath]
  (capitalize-words
    (-> filepath
        (fp/base)
        (s/replace "-" " ")
        ; Remove extension
        (s/split ".")
        (first))))

(defn is-md? [file]
  (= "md" (last (s/split (:name file) "."))))

(defn should-include? [file]
  (let [filepath (:name file)]
    (and (not (s/ends-with? filepath "-pics"))
         (not (s/includes? filepath "-unindexed"))
         (not (s/includes? filepath "DRAFT"))
         (not (s/includes? filepath "FREEWRITE"))
         (not (s/ends-with? filepath "all.md"))
         (or (is-md? file)
             (:dir? file))))) 

(defn file-to-link-path
  [filepath]
  (-> filepath
      (s/replace-first "content" "")
      (s/replace #".md" "/")))
  

(defn file-to-hiccup-li [filepath]
  "Converts filename like content/docs/understanding-the-world/influences.md
  into a li for the index page like
  <li><a href='/docs/understanding-the-world/influences/'>Influences</a></li>"
  [:li [:a {:href (file-to-link-path filepath)}
        (to-title filepath)]])

(defn parse-links
  "Finds all relref links in the text and returns them in a list of note names."
  [text]
  (into [] (for [match (re-seq #"relref\s+\"(.+?)\"" text)]
             (last match))))

; (j/println
;   (parse-links
;     "A subset of this is my [Experiences]({{< relref
;      \"/docs/lifestyle-optimizations/experiences.md\" >}}) page."))

(defn format-word [word]
  (s/trim (capitalize-words (s/replace word "-" " "))))

(defn extract-paragraph
  "Finds the paragraph in the given text that starts with the given prefix,
  then returns the text without the paragraph, and the paragraph."
  [text prefix]
  (if-let [paragraph (re-find (re-pattern (str "(?s)\n\n" prefix ".*?\n\n"))
                              (str text "\n\n"))]
    [(s/trim (s/replace text (str "\n\n" (s/trim paragraph)) ""))
     (s/trim paragraph)]
    [(s/trim text) ""]))

(assert=
  (extract-paragraph "

Thing: ai asnteisa 
oanetu
anote

another 'graph
hi


                        " "Thing")
  ["another 'graph\nhi" "Thing: ai asnteisa \noanetu\nanote"])
           

(defn parse-categories
  "Finds all categories in the text and returns them alongside the categoryless
  text."
  [text]
  (let [[categoryless-text categories-text] (extract-paragraph text
                                                               "Categories:")]
    [(into #{}
           (for [category (-> categories-text
                              (s/replace "Categories:" "")
                              (s/trim)
                              (s/split ","))
                 :let     [cleaned-category (format-word
                                              (if-let [delinked
                                                         (last (re-find
                                                                 #"\[(.*?)\]"
                                                                 category))]
                                                delinked
                                                category))]
                 :when    (not (= cleaned-category ""))]
             cleaned-category))
     categoryless-text]))

(assert=
  (parse-categories
    "<markdown>

Categories: cat1, ..., [Housing]({{< relref \"/docs/all.md\" >}}?Housing=true)

other
")
  [#{"Cat1" "..." "Housing"} "<markdown>\n\nother"])


(assert=
  (parse-categories
    "
# My First 5.12!

I projected this route for a while and still can remember its movements.
Posting it here mostly for my own personal nostalgia : ).

Here is the route: https://photos.app.goo.gl/fvva4kiMPeRbi6tP9.

Categories: [Climbing]({{< relref \"/\" >}}?Climbing=true),
[Event Reports]({{< relref \"/\" >}}?Event-Reports=true)
Categories: [Climbing]({{< relref \"/\" >}}?Climbing=true),
[Event Reports]({{< relref \"/\" >}}?Event-Reports=true)

Backlinks: 
")
  [#{"Climbing" "Event Reports"} "# My First 5.12!\n\nI projected this route for a while and still can remember its movements.\nPosting it here mostly for my own personal nostalgia : ).\n\nHere is the route: https://photos.app.goo.gl/fvva4kiMPeRbi6tP9.\n\nBacklinks:"])


(defn add-file-data [file]
  (let [markdown (slurp (:path file))]
    (merge file
      {:categories (first (parse-categories markdown))
       :markdown markdown
       :links (parse-links markdown)
       :title (to-title (:path file))})))

(defn get-files [filepath]
  (sort-by (fn [file] [(:dir? file) (:name file)])
           (for [file (os/ls filepath)
                 :when (should-include? file)]
             (let [pathed-file
                   (assoc file :path (fp/join filepath (:name file)))]
               (if (:dir? pathed-file)
                 pathed-file
                 (add-file-data pathed-file))))))

(defn get-all-files
  [filepath]
  (reduce concat
          (for [file (get-files filepath)
                :when (should-include? file)]
            (if (:dir? file)
              (get-all-files (:path file)) 
              [file]))))


(defn get-file-tree
  [filepath]
  (into [] (for [{:keys [path size name dir?]} (get-files filepath)]
             (let [file {:name name
                         :size size}]
               (if dir?
                 (assoc file :children (get-file-tree path)) 
                 file)))))

(declare make-dir-into-header)

(defn make-dir-contents [filepath]
  [:ul (for [file (get-files filepath)] 
         (cond
            (:dir? file)
            (make-dir-into-header file filepath)
            (is-md? file)
            (file-to-hiccup-li (fp/join filepath (:name file)))
            :else
            [:div "bad " file]))])
  
(defn make-dir-into-header [file cur-path]
  "Converts file map like {:dir? true :name my-dir} into collapsed html ul with 
  a bold header. Recursively generates all sub-directories."
  (let [filepath (fp/join cur-path (:name file))
        inner-list (make-dir-contents filepath)]
    (j/println filepath)
    (if (= (count (last inner-list)) 0)
      nil
      [:li [:details {:id (:name file)}
            [:summary [:strong (to-title filepath)]] inner-list]])))

;; ------------- Adding Categories based on Directory Structure ------------

(defn link-category [category]
  (let [formated-category (format-word category)]
    (str "[" formated-category
         "]({{< relref \"/\" >}}?"
         (s/replace formated-category " " "-")
         "=true)")))
  

(defn make-category-str [categories]
  (let [linked-categories
        (for [category categories]
          (link-category category))]
    (str "Categories: " (s/join ",\n" linked-categories))))

(defn update-categories [text new-categories]
  (let [[old-categories categoryless-text] (parse-categories text)
        categories (sort (union new-categories old-categories))]
    (str categoryless-text "\n\n" (make-category-str categories))))

(assert=
  (update-categories
    "
# My First 5.12!

I projected this route for a while and still can remember its movements.
Posting it here mostly for my own personal nostalgia : ).

Here is the route: https://photos.app.goo.gl/fvva4kiMPeRbi6tP9.

Categories: [Climbing]({{< relref \"/\" >}}?Climbing=true),
[Event Reports]({{< relref \"/\" >}}?Event-Reports=true)
" #{"Climbing" "Event Reports"})
  "# My First 5.12!

I projected this route for a while and still can remember its movements.
Posting it here mostly for my own personal nostalgia : ).

Here is the route: https://photos.app.goo.gl/fvva4kiMPeRbi6tP9.

Categories: [Climbing]({{< relref \"/\" >}}?Climbing=true),
[Event Reports]({{< relref \"/\" >}}?Event-Reports=true)")

(defn add-dir-categories! [root-dir]
  (doall
    (for [file (get-all-files root-dir)
          :let [path-categories
                (set (map format-word
                          (drop-last (drop 2 (s/split (:path file) "/")))))]]
      (spit (:path file)
            (update-categories (:markdown file) path-categories)))))

; -------------- Adding Backlinks to All Pages ----------------------------

(defn file-to-md-link
  [filepath]
  (str "[" (to-title filepath)
       "]({{< relref \"" (s/replace-first filepath "content" "") "\" >}})"))
      
(defn update-backlinks
  [md backlinks]
  (let [[backlinkless-text _] (extract-paragraph md "Backlinks:")]
    (if (= 0 (count backlinks))
      backlinkless-text
      (str backlinkless-text
           "\n\nBacklinks: "
           (apply str
                  (for [path backlinks]
                    (str (file-to-md-link path) ", \n")))))))

(defn get-file-to-backlinks
  [all-files]
  (apply merge-with into 
    (reduce concat
      (for [file all-files]
        (for [link (:links file)
              :when (not (= "/docs/all.md" link))]
          {link #{(:path file)}})))))

(defn update-files-with-backlinks
  [files]
  (let [path-to-backlinks (get-file-to-backlinks files)]
    (for [file files]
      (assoc file
             :backlinks (get path-to-backlinks
                             (s/replace-first (:path file) "content" ""))))))
                                                              
; TODO update this code to link to specific md sections, not just pages as a
; whole. this is particularly helpful for the "feelings" page and how it
; interacts with "experiences"
(defn add-all-backlinks! [root-dir]
  (doall
    (for [file (update-files-with-backlinks (get-all-files root-dir))]
      (do 
        (prn (str "Adding " (count (:backlinks file)) " backlinks for "
                  (:path file)))
        ; (prn (update-backlinks "" backlinks))
        (spit (:path file)
              (update-backlinks (:markdown file) (:backlinks file)))))))

;; ------------- Experiences.edn to Markdown Files -------------------------

(defn remove-md-link [md]
  (if-let [delinked (last (re-find #"\[(.*?)\]" md))]
    delinked md))

(defn clean-whitespace [md]
  "Removes multiple spaces and newlines."
  (s/replace (s/replace md "\n" "")
             #"\s\s+" " "))

(defn name-to-anchor-link [s]
  (str "#" (s/replace (s/lower-case s) " " "-")))

(defn make-feelings-list [feelings]
  (s/join "\n"
          (for [[feeling desc] feelings]
            (str "  - [" feeling
                 "]({{< relref \"/docs/feelings.md\" >}}"
                 (name-to-anchor-link feeling) ")"))))

(defn experiences-to-md [experiences-edn]
  (doall (for [[title description tags feelings] experiences-edn
               :let [clean-title (clean-whitespace title)
                     filename (str "content/docs/experiences/"
                                   (s/replace (remove-md-link clean-title)
                                              " " "-")
                                   ".md")
                     body (str "# " clean-title "\n\n"
                               (clean-whitespace description) "\n\n"
                               "Feelings: \n\n" (make-feelings-list feelings) "\n\n"
                               "Categories: " (s/join ", " tags))]]
            (spit filename body))))

(defn get-all-feelings [experiences]
  (sort-by #(first %)
    (reduce concat (for [[_ _ _ feelings] experiences]
                     feelings))))

(defn feelings-to-file [experiences-edn]
  (spit "content/docs/feelings.md"
    (str "# Feelings\n\n"
          (s/join "\n\n"
                  (for [[feeling description valences]
                        (get-all-feelings experiences-edn)
                        :when (not (nil? description))]
                    (str "## " feeling "\n\n" (clean-whitespace description)
                         "\n"
                         (if valences
                           (str "\n"
                                (s/join "\n" (for [v valences] 
                                               (str "  - " v))))
                           "")))))))
                    
; -------------------------------------------------------------------------

; ------------------------- All Note Page ---------------------------------

; I feel like this truncation is not really going to work.
; https://eddmann.com/posts/checking-for-balanced-parentheses-in-clojure/
; (defn balanced?
;   {:test #(do
;             (assert (true? (balanced? "(hello(world))")))
;             (assert (false? (balanced? "he)llo()world"))))}
;   ([expr] (balanced? (s/split expr #"") 0))
;   ([[x & xs] count]
;    (cond (neg? count) false
;          (nil? x) (zero? count)
;          (= x "(") (recur xs (inc count))
;          (= x ")") (recur xs (dec count))
;          :else (recur xs count))))
; (def min-chars 200)
; (defn truncate-md [md]
;   (let [start (subs md 0 (min (count md) min-chars)) ; At least min-chars
;         end (subs md (min (count md) min-chars))]
;     (str
;       (if (balanced? start)
;           start
;           ; Enough chars to close any parens
;           (str 
;             start
;             (subs end 0 (min (if-let [i (s/index-of end ")")] i (count md))
;                              (count md)))))
;       "...")))

(defn drop-frontmatter [md]
  (if (s/starts-with? md "---")
    (s/join "\n\n" (drop 1 (s/split md "\n\n")))
    md))

(defn truncate-md [md]
  "Grabs the title and first paragraph from the given markdown."
  (let [[p1 p2] (take 2 (s/split (drop-frontmatter md) "\n\n"))]
    (str "#" p1 "\n\n" (if (s/starts-with? p2 "#") "" p2) "...")))
  

(defn make-all-notes-page
  [notes]
  (str "# All Notes\n\n"
       (s/join "\n\n"
               (sort (for [{:keys [markdown path]} notes]
                       (truncate-md markdown))))))
    
; -------------------------------------------------------------------------

(def harry-potter-sorcerers-stone-words
  76944)

(def letters
  (into #{} (seq "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")))

(defn is-word
  [string]
  (contains? letters (first string)))
  

(defn word-count
  [files]
  (let [words (filter is-word
                      (s/split (reduce str (map :markdown
                                              (get-all-files "content/docs")))
                               #"\s+"))]
    (str (count words) " words, "
         (m/round (* 100 (double (/ (count words)
                                    harry-potter-sorcerers-stone-words))))
         "% of Harry Potter and the Sorcerer's Stone")))

(defn update-word-count
  [filepath all-files]
  (let [prefix "Whole site count: "
        [countless-text _] (extract-paragraph (slurp filepath) prefix)]
    (spit filepath 
          (str countless-text "\n\n" prefix (word-count all-files)))))


(def index-path "content/menu/index.md")
(defn main []
  (let [all-files (get-all-files "content/docs")]
    ; (spit index-path (h/html (make-dir-contents "content/docs")))
    ; (spit "content/menu/index.edn" (get-file-tree "content/docs"))
    (spit "content/docs/all.edn" 
          ; THIS EATS DEBUGGING PRINT STATEMENTS!!!
          (with-out-str (pprint (into [] all-files))))
    (spit "content/docs/all.md" (make-all-notes-page all-files))
    (prn (word-count all-files))
    (update-word-count "content/_index.md" all-files))

  (let [experiences-edn
        (read-string
          (slurp "content/docs/lifestyle-optimizations/experiences.edn"))]
    (feelings-to-file experiences-edn)
    (experiences-to-md experiences-edn))

  (add-dir-categories! "content/docs")
  (add-all-backlinks! "content/docs"))
  

  ; ; Requires `sudo apt install tidy`
  ; (os/sh "tidy"
  ;        "-indent"
  ;        "--show-body-only" "yes"
  ;        "--doctype" "omit"
  ;        "--tidy-mark" "no"
  ;        "-omit"
  ;        "-o" index-path index-path) 
  ; ; Prepend hugo fontmatter
  ; (os/sh "sed" "-i" "1s;^;---\\nheadless: true\\n---\\n;" index-path))

(main)
