#!/usr/bin/env joker

(ns script
    (:require [joker.filepath :as fp]
              [joker.string :as s]
              [joker.os :as os]
              [joker.hiccup :as h]
              [joker.core :as j]))

(defn capitalize-words [string]
  (s/join " "
          (for [word (s/split string " ")]
            (s/capitalize word))))

(defn to-title [filepath]
  (capitalize-words
    (-> filepath
        (fp/base)
        (s/replace "-" " ")
        ; Remove extension
        (s/split ".")
        (first))))

(defn is-md? [file-map]
  (= "md" (last (s/split (:name file-map) "."))))

(defn should-include? [file-map]
  (let [filepath (:name file-map)]
    (and (not (s/ends-with? filepath "-pics"))
         (not (s/includes? filepath "-unindexed"))
         (not (s/includes? filepath "DRAFT"))
         (not (s/includes? filepath "FREEWRITE"))
         (or (is-md? file-map)
             (:dir? file-map))))) 

(defn make-file-into-li [filepath]
  "Converts filename like content/docs/understanding-the-world/influences.md
  into a li for the index page like
  <li><a href='/docs/understanding-the-world/influences/'>Influences</a></li>"
  [:li [:a {:href (-> filepath
                      (s/replace-first "content" "")
                      (s/replace #".md" "/"))}
        (to-title filepath)]])

(declare make-dir-into-header)

(defn make-dir-contents [filepath]
  [:ul (for [file (sort-by (fn [file-map] [(:dir? file-map) (:name file-map)])
                           (filter should-include?
                                   (os/ls filepath)))] 
         (cond
            (:dir? file)
            (make-dir-into-header file filepath)
            (is-md? file)
            (make-file-into-li (fp/join filepath (:name file)))
            :else
            [:div "bad " file]))])
  
(defn make-dir-into-header [file-map cur-path]
  "Converts file map like {:dir? true :name my-dir} into collapsed html ul with 
  a bold header. Recursively generates all sub-directories."
  (let [filepath (fp/join cur-path (:name file-map))
        inner-list (make-dir-contents filepath)]
    (j/println filepath)
    (if (= (count (last inner-list)) 0)
      nil
      [:li [:details {:id (:name file-map)}
            [:summary [:strong (to-title filepath)]] inner-list]])))

(defn create-index []
   (h/html (make-dir-contents "content/docs")))
  
(def index-path "content/menu/index.md")
(spit index-path (create-index))
; Requires `sudo apt install tidy`
(os/sh "tidy"
       "-indent"
       "--show-body-only" "yes"
       "--doctype" "omit"
       "--tidy-mark" "no"
       "-omit"
       "-o" index-path index-path) 
; Prepend hugo fontmatter
(os/sh "sed" "-i" "1s;^;---\\nheadless: true\\n---\\n;" index-path)
